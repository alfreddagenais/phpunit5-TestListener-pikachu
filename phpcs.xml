<?xml version="1.0" ?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PHP_CnG">
    <description>The coding standard</description>

    <!-- <exclude-pattern>*/tests/*/*\.(php|css|js)$</exclude-pattern> -->

    <!-- Don't hide tokenizer exceptions -->
    <rule ref="Internal.Tokenizer.Exception">
        <type>error</type>
    </rule>

    <!-- Include the whole PEAR standard -->
    <rule ref="PEAR">
        <exclude name="PEAR.NamingConventions.ValidFunctionName" />
        <exclude name="PEAR.NamingConventions.ValidVariableName" />
        <exclude name="PEAR.Commenting.ClassComment" />
        <exclude name="PEAR.Commenting.FileComment.MissingCategoryTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingPackageTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingLinkTag" />
        <exclude name="PEAR.Commenting.FileComment.MissingVersion" />
        <exclude name="PEAR.Commenting.InlineComment" />
        <exclude name="PEAR.Commenting.FileComment.Missing" />
        <exclude name="PEAR.WhiteSpace.ScopeIndent" />
    </rule>

    <!-- Include some sniffs from other standards that don't conflict with PEAR -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="Squiz.Commenting.LongConditionClosingComment"/>
    <rule ref="Squiz.Commenting.PostStatementComment"/>
    <rule ref="Squiz.Commenting.VariableComment"/>
    <rule ref="Squiz.Formatting.OperatorBracket"/>
    <rule ref="Squiz.PHP.DisallowInlineIf"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.ControlStructures.DisallowYodaConditions"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="PSR12.Files.OpenTag"/>
    <rule ref="Zend.Files.ClosingTag"/>

    <!-- PEAR uses warnings for inline control structures, so switch back to errors -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <properties>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- We use custom indent rules for arrays -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">
        <severity>0</severity>
    </rule>

    <!-- Check var names, but we don't want leading underscores for private vars -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.NotCamelCaps" />
        <exclude name="Squiz.NamingConventions.ValidVariableName.PublicHasUnderscore" />
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore" />
        <exclude name="Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps" />
    </rule>

    <!-- Only one argument per line in multi-line function calls -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
            <property name="requiredSpacesAfterOpen" value="false"/>
            <property name="requiredSpacesBeforeClose" value="false"/>
            <property name="SpaceBeforeCloseBracket" value="false"/>
            <property name="SpaceAfterOpenBracket" value="false"/>
        </properties>
    </rule>

    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
		<severity phpcs-only="true">0</severity>
	</rule>
	<rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
		<severity phpcs-only="true">0</severity>
	</rule>

    <!-- Have 12 chars padding maximum and always show as errors -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="12"/>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- Ban some functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="sizeof" value="count"/>
                <element key="delete" value="unset"/>
                <element key="print" value="echo"/>
                <element key="is_null" value="null"/>
                <element key="create_function" value="null"/>
            </property>
        </properties>
    </rule>

    <!-- Private methods MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
    </rule>

    <!-- Private properties MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <type>error</type>
    </rule>

    <!-- The testing bootstrap file uses string concats to stop IDEs seeing the class aliases -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <exclude-pattern>tests/bootstrap\.php</exclude-pattern>
    </rule>

    <!-- This test file specifically *needs* Windows line endings for testing purposes. -->
    <rule ref="Generic.Files.LineEndings.InvalidEOLChar">
        <exclude-pattern>tests/Core/Tokenizer/StableCommentWhitespaceWinTest\.php</exclude-pattern>
    </rule>

    <!-- Ensures doc blocks follow basic formatting -->
    <rule ref="Generic.Commenting.DocComment">
        <!-- Allow single-line doc comments. See https://github.com/squizlabs/PHP_CodeSniffer/issues/258. -->
        <exclude name="Generic.Commenting.DocComment.ContentAfterOpen" />
        <exclude name="Generic.Commenting.DocComment.ContentBeforeClose" />
        <!-- Don't require short description -->
        <exclude name="Generic.Commenting.DocComment.MissingShort" />
        <!-- Doesn't work well with annotations -->
        <exclude name="Generic.Commenting.DocComment.TagValueIndent" />
    </rule>

    <!-- Lines can be N chars long (warnings), errors at M chars -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="200" />
            <property name="absoluteLineLimit" value="150" />
        </properties>
    </rule>

    <!-- Verifies that block comments are used appropriately -->
    <rule ref="Squiz.Commenting.BlockComment">
        <!-- Not required -->
        <exclude name="Squiz.Commenting.BlockComment.FirstLineIndent" />
        <exclude name="Squiz.Commenting.BlockComment.LineIndent" />
        <exclude name="Squiz.Commenting.BlockComment.LastLineIndent" />
        <!-- Allow for inline doc block comments -->
        <exclude name="Squiz.Commenting.BlockComment.WrongStart" />
        <!-- Prevents /* @var */ syntax from being used -->
        <exclude name="Squiz.Commenting.BlockComment.SingleLine" />
    </rule>

    <!-- Checks that there is adequate spacing between comments -->
    <rule ref="Squiz.Commenting.InlineComment">
        <!-- Inline doc block comments should be allowed -->
        <exclude name="Squiz.Commenting.InlineComment.DocBlock" />
        <!-- Not required -->
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
        <exclude name="Squiz.Commenting.InlineComment.SpacingAfter" />
    </rule>

    <!-- Checks for empty catch clause. Catch clauses must at least have comment -->
    <rule ref="Squiz.Commenting.EmptyCatchComment" />
</ruleset>
